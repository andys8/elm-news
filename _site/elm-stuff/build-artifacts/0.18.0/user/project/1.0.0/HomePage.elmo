var _user$project$HomePage$toDisplayStory = function (story) {
	return {
		from: _user$project$News_News$Author(story.author),
		title: story.title,
		date: _elm_lang$core$Maybe$Just(story.date),
		url: story.url,
		tag: story.tag
	};
};
var _user$project$HomePage$updateRemainingToFetch = F2(
	function (tag, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				remainingPlacesToFetchFrom: A2(
					_elm_lang$core$List$filter,
					function (t) {
						return !_elm_lang$core$Native_Utils.eq(t, tag);
					},
					model.remainingPlacesToFetchFrom)
			});
	});
var _user$project$HomePage$init = {
	errorManager: _user$project$ErrorManager$init,
	allStories: {ctor: '[]'},
	news: _user$project$News_News$init,
	previousStoryId: _elm_lang$core$Maybe$Nothing,
	remainingPlacesToFetchFrom: {
		ctor: '::',
		_0: 'elm-dev',
		_1: {
			ctor: '::',
			_0: 'elm-discuss',
			_1: {
				ctor: '::',
				_0: _user$project$News_Reddit$tag,
				_1: {
					ctor: '::',
					_0: _user$project$News_HackerNews$tag,
					_1: {ctor: '[]'}
				}
			}
		}
	},
	fetchedStories: false
};
var _user$project$HomePage$scrollIntoView = _elm_lang$core$Native_Platform.outgoingPort(
	'scrollIntoView',
	function (v) {
		return v;
	});
var _user$project$HomePage$cmdToScrollToPrevious = function (model) {
	return _elm_lang$core$List$isEmpty(model.remainingPlacesToFetchFrom) ? A2(
		_elm_lang$core$Maybe$withDefault,
		_elm_lang$core$Platform_Cmd$none,
		A2(_elm_lang$core$Maybe$map, _user$project$HomePage$scrollIntoView, model.previousStoryId)) : _elm_lang$core$Platform_Cmd$none;
};
var _user$project$HomePage$fetchGoogleGroupMsgs = _elm_lang$core$Native_Platform.outgoingPort(
	'fetchGoogleGroupMsgs',
	function (v) {
		return v;
	});
var _user$project$HomePage$fetchedGoogleGroupMsgs = _elm_lang$core$Native_Platform.incomingPort(
	'fetchedGoogleGroupMsgs',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (tag) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (stories) {
					return _elm_lang$core$Json_Decode$succeed(
						{tag: tag, stories: stories});
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'stories',
					_elm_lang$core$Json_Decode$list(
						A2(
							_elm_lang$core$Json_Decode$andThen,
							function (author) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									function (title) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											function (date) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													function (url) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															function (tag) {
																return _elm_lang$core$Json_Decode$succeed(
																	{author: author, title: title, date: date, url: url, tag: tag});
															},
															A2(_elm_lang$core$Json_Decode$field, 'tag', _elm_lang$core$Json_Decode$string));
													},
													A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string));
											},
											A2(_elm_lang$core$Json_Decode$field, 'date', _elm_lang$core$Json_Decode$float));
									},
									A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string));
							},
							A2(_elm_lang$core$Json_Decode$field, 'author', _elm_lang$core$Json_Decode$string)))));
		},
		A2(_elm_lang$core$Json_Decode$field, 'tag', _elm_lang$core$Json_Decode$string)));
var _user$project$HomePage$errorGoogleGroupMsgs = _elm_lang$core$Native_Platform.incomingPort(
	'errorGoogleGroupMsgs',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (tag) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (error) {
					return _elm_lang$core$Json_Decode$succeed(
						{tag: tag, error: error});
				},
				A2(_elm_lang$core$Json_Decode$field, 'error', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'tag', _elm_lang$core$Json_Decode$string)));
var _user$project$HomePage$Model = F6(
	function (a, b, c, d, e, f) {
		return {allStories: a, errorManager: b, news: c, previousStoryId: d, remainingPlacesToFetchFrom: e, fetchedStories: f};
	});
var _user$project$HomePage$NewsMsg = function (a) {
	return {ctor: 'NewsMsg', _0: a};
};
var _user$project$HomePage$FetchedNews = F2(
	function (a, b) {
		return {ctor: 'FetchedNews', _0: a, _1: b};
	});
var _user$project$HomePage$fetch = F2(
	function (tag, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			function (result) {
				return A2(
					_user$project$HomePage$FetchedNews,
					tag,
					A2(_elm_lang$core$Result$mapError, _elm_lang$core$Basics$toString, result));
			},
			_elm_lang$http$Http$toTask(request));
	});
var _user$project$HomePage$onPageLoad = F2(
	function (previousStoryId, model) {
		var cmds = model.fetchedStories ? {ctor: '[]'} : {
			ctor: '::',
			_0: _user$project$HomePage$fetchGoogleGroupMsgs('elm-dev'),
			_1: {
				ctor: '::',
				_0: _user$project$HomePage$fetchGoogleGroupMsgs('elm-discuss'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$HomePage$fetch, _user$project$News_Reddit$tag, _user$project$News_Reddit$fetch),
					_1: {
						ctor: '::',
						_0: A2(_user$project$HomePage$fetch, _user$project$News_HackerNews$tag, _user$project$News_HackerNews$fetch),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_elm_lang$core$Native_Utils.update(
				model,
				{previousStoryId: previousStoryId, fetchedStories: true}),
			cmds);
	});
var _user$project$HomePage$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$HomePage$fetchedGoogleGroupMsgs(
				function (resp) {
					return A2(
						_user$project$HomePage$FetchedNews,
						resp.tag,
						_elm_lang$core$Result$Ok(resp.stories));
				}),
			_1: {
				ctor: '::',
				_0: _user$project$HomePage$errorGoogleGroupMsgs(
					function (resp) {
						return A2(
							_user$project$HomePage$FetchedNews,
							resp.tag,
							_elm_lang$core$Result$Err(resp.error));
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$HomePage$AnalyticsEvent = function (a) {
	return {ctor: 'AnalyticsEvent', _0: a};
};
var _user$project$HomePage$ErrorManagerMessage = function (a) {
	return {ctor: 'ErrorManagerMessage', _0: a};
};
var _user$project$HomePage$updateErrorManager = F2(
	function (msg, model) {
		var _p0 = A2(_user$project$ErrorManager$update, msg, model.errorManager);
		var newErrorMang = _p0._0;
		var fx = _p0._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{errorManager: newErrorMang}),
			_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$HomePage$ErrorManagerMessage, fx)
		};
	});
var _user$project$HomePage$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ErrorManagerMessage':
				return A2(_user$project$HomePage$updateErrorManager, _p1._0, model);
			case 'AnalyticsEvent':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Analytics$registerEvent(_p1._0),
						_1: {ctor: '[]'}
					});
			case 'FetchedNews':
				if (_p1._1.ctor === 'Ok') {
					var updatedModel = A2(
						_user$project$HomePage$updateRemainingToFetch,
						_p1._0,
						_elm_lang$core$Native_Utils.update(
							model,
							{
								allStories: A2(_elm_lang$core$Basics_ops['++'], model.allStories, _p1._1._0)
							}));
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						updatedModel,
						{
							ctor: '::',
							_0: _user$project$HomePage$cmdToScrollToPrevious(updatedModel),
							_1: {ctor: '[]'}
						});
				} else {
					var _p3 = _p1._0;
					var error = {
						display: A2(_elm_lang$core$Basics_ops['++'], 'Failed to fetch content from ', _p3),
						raw: A2(_elm_lang$core$Debug$log, '', _p1._1._0)
					};
					var _p2 = A2(
						_user$project$HomePage$updateErrorManager,
						_user$project$ErrorManager$AddError(error),
						model);
					var updatedWithError = _p2._0;
					var errorCmd = _p2._1;
					var updatedModel = A2(_user$project$HomePage$updateRemainingToFetch, _p3, updatedWithError);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						updatedModel,
						{
							ctor: '::',
							_0: errorCmd,
							_1: {
								ctor: '::',
								_0: _user$project$HomePage$cmdToScrollToPrevious(updatedModel),
								_1: {ctor: '[]'}
							}
						});
				}
			default:
				var _p4 = A3(
					_user$project$News_News$update,
					{newsEvent: _user$project$Analytics$newsLink, redirectToId: true},
					_p1._0,
					model.news);
				var newNews = _p4._0;
				var cmd = _p4._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{news: newNews}),
					{
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$HomePage$NewsMsg, cmd),
						_1: {ctor: '[]'}
					});
		}
	});
var _user$project$HomePage$view = F3(
	function (now, screenWidth, model) {
		var news = _elm_lang$core$List$isEmpty(model.allStories) ? _user$project$Components_Spinner$view : A2(
			_elm_lang$html$Html$map,
			_user$project$HomePage$NewsMsg,
			A3(
				_user$project$News_News$view,
				model.news,
				{now: now, screenWidth: screenWidth},
				A2(_elm_lang$core$List$map, _user$project$HomePage$toDisplayStory, model.allStories)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('home__body'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: news,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						_user$project$HomePage$ErrorManagerMessage,
						_user$project$ErrorManager$view(model.errorManager)),
					_1: {ctor: '[]'}
				}
			});
	});
